///
/// @access private

@function _theme-insert-nth ($list, $index, $value) {
    $result: null;

    @if type-of($index) != number {
        @warn "$index: #{quote($index)} is not a number for `insert-nth`.";
    }
    @else if $index < 1 {
        @warn "List index 0 must be a non-zero integer for `insert-nth`";
    }
    @else if $index > length($list) {
        @warn "List index is #{$index} but list is only #{length($list)} item long for `insert-nth'.";
    }
    @else {
        $result: ();

        @for $i from 1 through length($list) {
            @if $i == $index {
                $result: append($result, $value);
            }

            $result: append($result, nth($list, $i));
        }
    }

    @return $result;
}

///
/// @access private

@mixin _theme-properties ($settings, $rule, $variable, $function, $nth, $args...) {
    $map: if(map-has-key($settings, $variable), $settings, $default);
    $value: map-get($map, $variable);

    @if $function == "" {
        #{$rule}: $value;
    }
    @else {
        $params: _theme-insert-nth($args, $nth, $value);

        #{$rule}: call($function, $params...);
    }
}

///
/// @access private

@mixin _theme-engine ($at-root, $rule, $variable, $function, $nth, $args...) {
    @each $name, $settings in $themes {
        @if ($at-root) {
            @at-root {
                .t-#{$name} & {
                    @include _theme-properties($settings, $rule, $variable, $function, $nth, $args...);
                }
            }
        }
        @else {
            .theme-local.t-#{$name} & {
                @include _theme-properties($settings, $rule, $variable, $function, $nth, $args...);
            }
        }
    }
}

/// This function loops through all of the available themes and generates the appropriate
/// CSS based on the theme definition
///
/// @param {String} $rule
///   The CSS keyword that will be effected based on the theme
/// @param {String} $variable
///   The name of the key used in the theme map
/// @param {String} $function [""]
///   The name of the function that will be called with `call()`
/// @param {Number [unitless]} $nth [0]
///   The index that the value will belong in with respect to the `call()` function
/// @param {Arglist} $args
///   The arguments that will be passed to the `call()` function
///
/// @link https://git.io/vrHLS BZiON's Theme Engine
///
/// @example scss
///   a {
///       @include theme-specific("color", "hyperlink");
///   }
///
/// @example css
///   .t-light a {
///       color: blue;
///   }
///
///   .t-dark a {
///       color: yellow;
///   }
///
/// @example scss - Usage with w/function call
///   a {
///       @include theme-specific("color", "link-color", darken, 1, 15%);
///   }
///
/// @example scss - Pseudo code of previous example
///   a {
///       // We use index 1 because the fetched value is the first argument in the function call
///       color: darken(<'link-color' value @ index 1>, 15%);
///   }
///

@mixin theme-global ($rule, $variable, $function: "", $nth: 0, $args...) {
    @include _theme-engine(true, $rule, $variable, $function, $nth, $args...);
}

@mixin theme-local ($rule, $variable, $function: "", $nth: 0, $args...) {
    @include _theme-engine(false, $rule, $variable, $function, $nth, $args...);
}